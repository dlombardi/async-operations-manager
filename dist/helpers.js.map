{"version":3,"sources":["../src/helpers.js"],"names":["makeConstantsObject","sourceValues","extraOverrides","Object","freeze","generateAsyncOperationKey","descriptorId","params","config","asyncOperationManagerConfig","getConfig","baseAsyncOperationKey","logger","exceptionsCallback","join","getAndValidateParams","paramsToCheck","asyncOperationDescriptor","asyncOperationParams","requiredParams","optionalParams","has","paramValue","keys","getAsyncOperationDescriptor","asyncOperationDescriptors","warningsCallback","debug","verboseLoggingCallback","infoLoggingCallback","getAsyncOperationInfo","descriptors","asyncOperationKey","otherFields"],"mappings":"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","sourcesContent":["// TODO: JSDocify every function\n\nimport {\n  assign,\n  every,\n  keyBy,\n  has,\n  isEmpty,\n  isString,\n  isUndefined,\n  partial,\n  pick,\n  omit,\n  some,\n  values,\n} from 'lodash';\n\nimport asyncOperationManagerConfig from './config';\n\nconst makeConstantsObject = (sourceValues = [], extraOverrides = {}) =>\n  Object.freeze(\n    // The keyBy create our keys-and-values object, then we manipulate it and freeze it.s\n    assign(keyBy(sourceValues), extraOverrides)\n  );\n\n\nconst generateAsyncOperationKey = (descriptorId, params = {}) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  let baseAsyncOperationKey = descriptorId;\n  if (!descriptorId || !isString(descriptorId)) {\n    config.logger.exceptionsCallback('A descriptorId string to create the async operation key was not provided');\n  }\n\n  if (!isEmpty(params)) {\n    baseAsyncOperationKey = `${baseAsyncOperationKey}_${values(params).join('_')}`;\n  }\n\n  return baseAsyncOperationKey;\n};\n\nconst getAndValidateParams = (paramsToCheck, asyncOperationDescriptor) => {\n  // Pick out designated required and optional params exclusively.\n  const asyncOperationParams = {\n    ...asyncOperationDescriptor.requiredParams ? pick(paramsToCheck, asyncOperationDescriptor.requiredParams) : {},\n    ...asyncOperationDescriptor.optionalParams ? pick(paramsToCheck, asyncOperationDescriptor.optionalParams) : {},\n  };\n\n  const { logger } = asyncOperationManagerConfig.getConfig();\n  if (asyncOperationDescriptor.requiredParams) {\n    // make sure that every requiredParams is included in the asyncOperationParams object and that\n    // none of the values are undefined\n    if (!every(asyncOperationDescriptor.requiredParams, partial(has, asyncOperationParams)) ||\n      (asyncOperationParams && some(asyncOperationParams, paramValue => isUndefined(paramValue)))) {\n      // This warning is here just to catch typos\n      logger.exceptionsCallback(`\n        It looks like ${asyncOperationDescriptor.descriptorId} is missing a param/requiredParams.\n        requiredParams provided: : ${Object.keys(asyncOperationParams)}\n        requiredParams: : ${asyncOperationDescriptor.requiredParams}\n      `);\n    }\n  }\n\n  return asyncOperationParams;\n};\n\nconst getAsyncOperationDescriptor = (asyncOperationDescriptors, descriptorId) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  const asyncOperationDescriptor = asyncOperationDescriptors[descriptorId];\n\n  if (!asyncOperationDescriptor) {\n    config.logger.warningsCallback(`descriptorId \"${descriptorId}\" does not match with any registered async operation descriptor`);\n    return null;\n  }\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperationDescriptor for ${descriptorId}`);\n    config.logger.infoLoggingCallback('getAsyncOperationDescriptor [Data Snapshot]:', {\n      asyncOperationDescriptors,\n      asyncOperationDescriptor,\n    });\n  }\n\n  return asyncOperationDescriptor;\n};\n\nconst getAsyncOperationInfo = (descriptors, descriptorId, params) => {\n  const asyncOperationDescriptor = getAsyncOperationDescriptor(descriptors, descriptorId);\n  const asyncOperationParams = getAndValidateParams(params, asyncOperationDescriptor);\n  const asyncOperationKey = generateAsyncOperationKey(descriptorId, asyncOperationParams);\n  const otherFields = omit(params, asyncOperationDescriptor.requiredParams);\n\n  return {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n    otherFields,\n  };\n};\n\nexport {\n  makeConstantsObject,\n  generateAsyncOperationKey,\n  getAndValidateParams,\n  getAsyncOperationInfo,\n};\n"],"file":"helpers.js"}