{"version":3,"sources":["../../src/__tests__/helpers_test.js"],"names":["describe","beforeEach","asyncOperationManagerConfig","setConfig","logger","exceptionsCallback","sinon","spy","it","asyncOperationKey","to","equal","personId","orgId","getConfig","undefined","called","callCount","params","name","asyncOperationDescriptor","requiredParams","asyncOperationParams","deep","age","optionalParams","fruits","APPLE","BANANA","Object","isExtensible","be","false"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport asyncOperationManagerConfig from '../config';\n\nimport {\n  makeConstantsObject,\n  generateAsyncOperationKey,\n  getAndValidateParams,\n} from '../helpers';\n\ndescribe('helpers', () => {\n  beforeEach(() => {\n    asyncOperationManagerConfig.setConfig({\n      logger: {\n        exceptionsCallback: sinon.spy(),\n      },\n    });\n  });\n\n  describe('generateAsyncOperationKey', () => {\n    it('should create an asyncOperation key with no params', () => {\n      const asyncOperationKey = generateAsyncOperationKey('UPDATE_PERSON_DATA', {});\n      expect(asyncOperationKey).to.equal('UPDATE_PERSON_DATA');\n    });\n    it('should create an asyncOperation key with one param', () => {\n      const asyncOperationKey = generateAsyncOperationKey('UPDATE_PERSON_DATA', { personId: 111 });\n      expect(asyncOperationKey).to.equal('UPDATE_PERSON_DATA_111');\n    });\n    it('should create an asyncOperation key with multiple params', () => {\n      const asyncOperationKey = generateAsyncOperationKey('UPDATE_PERSON_DATA', { orgId: 222, personId: 111 });\n      expect(asyncOperationKey).to.equal('UPDATE_PERSON_DATA_222_111');\n    });\n    it('should throw an exception if a label is not provided', () => {\n      const { logger } = asyncOperationManagerConfig.getConfig();\n      generateAsyncOperationKey();\n      generateAsyncOperationKey('');\n      generateAsyncOperationKey(undefined);\n      expect(logger.exceptionsCallback.called).to.equal(true);\n      expect(logger.exceptionsCallback.callCount).to.equal(3);\n    });\n    it('should throw an exception if a label is not a string', () => {\n      const { logger } = asyncOperationManagerConfig.getConfig();\n      generateAsyncOperationKey({});\n      generateAsyncOperationKey([]);\n      generateAsyncOperationKey(2);\n      expect(logger.exceptionsCallback.called).to.equal(true);\n      expect(logger.exceptionsCallback.callCount).to.equal(3);\n    });\n  });\n\n  describe('getAndValidateParams', () => {\n    beforeEach(() => {\n      asyncOperationManagerConfig.setConfig({\n        logger: {\n          exceptionsCallback: sinon.spy(),\n        },\n      });\n    });\n\n    it('should validate requiredParams and successfully return correct asyncOperation params', () => {\n      const params = {\n        personId: 2,\n        orgId: 10,\n        name: 'Darien',\n      };\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId', 'orgId'],\n      };\n      const asyncOperationParams = getAndValidateParams(params, asyncOperationDescriptor);\n      expect(asyncOperationParams).to.deep.equal({ personId: 2, orgId: 10 });\n    });\n    it('should validate requiredParams and successfully return all correct asyncOperation params including optionalParams', () => {\n      const params = {\n        personId: 2,\n        orgId: 10,\n        age: 25,\n        name: 'Darien',\n      };\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId', 'orgId'],\n        optionalParams: ['age'],\n      };\n      const asyncOperationParams = getAndValidateParams(params, asyncOperationDescriptor);\n      expect(asyncOperationParams).to.deep.equal({ personId: 2, orgId: 10, age: 25 });\n    });\n    it('should return only optionalParams', () => {\n      const params = {\n        personId: 2,\n        orgId: 10,\n        age: 25,\n        name: 'Darien',\n      };\n      const asyncOperationDescriptor = {\n        optionalParams: ['age'],\n      };\n      const asyncOperationParams = getAndValidateParams(params, asyncOperationDescriptor);\n      expect(asyncOperationParams).to.deep.equal({ age: 25 });\n    });\n    it('should validate and fail on an undefined required param', () => {\n      const { logger } = asyncOperationManagerConfig.getConfig();\n      \n      const params = {\n        personId: undefined,\n        orgId: 10,\n        name: 'Darien',\n      };\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId', 'orgId'],\n      };\n      getAndValidateParams(params, asyncOperationDescriptor);\n      expect(logger.exceptionsCallback.called).to.equal(true);\n    });\n    it('should validate and succeed on a falsey required param', () => {\n      const { logger } = asyncOperationManagerConfig.getConfig();\n      \n      const params = {\n        personId: null,\n        orgId: 10,\n        name: 'TheAceMan',\n      };\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId', 'orgId'],\n      };\n      getAndValidateParams(params, asyncOperationDescriptor);\n      expect(logger.exceptionsCallback.called).to.equal(false);\n    });\n    it('should validate and fail on a missing required param', () => {\n      const { logger } = asyncOperationManagerConfig.getConfig();\n      \n      const params = {\n        personId: 2,\n        name: 'Darien',\n      };\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId', 'orgId'],\n      };\n      getAndValidateParams(params, asyncOperationDescriptor);\n      expect(logger.exceptionsCallback.called).to.equal(true);\n    });\n  });\n\n  describe('makeConstantsObject', () => {\n    beforeEach(() => {\n      asyncOperationManagerConfig.setConfig({\n        logger: {\n          exceptionsCallback: sinon.spy(),\n        },\n      });\n    });\n\n    it('should make a constants object out of an array of string values', () => {\n      const fruits = makeConstantsObject(['APPLE', 'BANANA']);\n      expect(fruits).to.deep.equal({\n        APPLE: 'APPLE',\n        BANANA: 'BANANA',\n      });\n    });\n\n    it('should make a constants object that is immutable', () => {\n      const fruits = makeConstantsObject(['APPLE', 'BANANA']);\n      expect(Object.isExtensible(fruits)).to.be.false;\n    });\n  });\n});\n"],"file":"helpers_test.js"}